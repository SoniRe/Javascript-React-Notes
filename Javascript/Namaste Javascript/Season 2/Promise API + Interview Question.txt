Promise.all() - It is used to handle multiple promises at single and we pass array of promises

Promise.allSetteled([p1, p2, p3]) - It will wait for all promises to be settled (meaning either it gets resolved or rejected)

Promise.race([p1, p2, p3]) - It will wait for first promise to get settled

Promise.any([p1, p2, p3]) - Similar to race but it will wait for first success/resolved/fulfilled

// Promise.all()

const p1 = new Promise(function (resolve, reject) {
  setTimeout(() => resolve("Promise 1 Success"), 3000);
});

const p2 = new Promise(function (resolve, reject) {
  // setTimeout(() => resolve("Promise 2 Success"), 1000);
  setTimeout(() => reject("Promise 2 Fail"), 1000);
});

const p3 = new Promise(function (resolve, reject) {
  setTimeout(() => resolve("Promise 3 Success"), 2000);
});

Promise.all([p1, p2, p3])
  .then((result) => console.log(result))
  .catch((err) => console.error(err));

// Promise.allSettled()

Promise.allSettled([p1, p2, p3])
  .then((result) => console.log(result))
  .catch((err) => console.error(err));

// Promise.race()

Promise.race([p1, p2, p3])
  .then((result) => console.log(result))
  .catch((err) => console.error(err));

// Promise.any()

Promise.any([p1, p2, p3])
  .then((result) => console.log(result))
  .catch((err) => {
    console.error(err);
    console.log(err.errors); // Give array of errors
  });

